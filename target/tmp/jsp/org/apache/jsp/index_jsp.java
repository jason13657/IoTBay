/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.12.v20180830
 * Generated at: 2025-05-01 08:56:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html lang=\"en\">\n");
      out.write("    <head>\n");
      out.write("        <meta charset=\"UTF-8\" />\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n");
      out.write("        <link rel=\"stylesheet\" href=\"css/styles.css\" />\n");
      out.write("        <title>IoT Bay</title>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "components/header.jsp", out, false);
      out.write("\n");
      out.write("        <nav class=\"nav__container\">\n");
      out.write("            <ul class=\"nav__list\">\n");
      out.write("                <li class=\"nav__item\">\n");
      out.write("                    <a href=\"\" class=\"nav__link\">Industrial</a>\n");
      out.write("                </li>\n");
      out.write("                <li class=\"nav__item\">\n");
      out.write("                    <a href=\"\" class=\"nav__link\">Warehouse</a>\n");
      out.write("                </li>\n");
      out.write("                <li class=\"nav__item\">\n");
      out.write("                    <a href=\"\" class=\"nav__link\">Agriculture</a>\n");
      out.write("                </li>\n");
      out.write("                <li class=\"nav__item\">\n");
      out.write("                    <a href=\"\" class=\"nav__link\">Smart Home</a>\n");
      out.write("                </li>\n");
      out.write("            </ul>\n");
      out.write("        </nav>\n");
      out.write("\n");
      out.write("        <section class=\"hero\">\n");
      out.write("            <img class=\"hero__image\" src=\"images/hero.png\" alt=\"IoT Hero main\"/>\n");
      out.write("        </section>\n");
      out.write("\n");
      out.write("        <section class=\"featured__container\">\n");
      out.write("            <h3 class=\"featured__title\">Featured Products</h3>\n");
      out.write("            <div class=\"product__container\">\n");
      out.write("                <div class=\"product__card\">\n");
      out.write("                    <img class=\"product__image\" src=\"images/sample1.png\" alt=\"Sample 1\" />\n");
      out.write("                    <h4 class=\"product__title\">Sensor</h4>\n");
      out.write("                    <p class=\"product__price\">$459</p>\n");
      out.write("                </div>\n");
      out.write("                    <div class=\"product__card\">\n");
      out.write("                    <img class=\"product__image\" src=\"images/sample2.png\" alt=\"Sample 2\" />\n");
      out.write("                    <h4 class=\"product__title\">Cables</h4>\n");
      out.write("                    <p class=\"product__price\">$35</p>\n");
      out.write("                </div>\n");
      out.write("                    <div class=\"product__card\">\n");
      out.write("                    <img class=\"product__image\" src=\"images/sample3.png\" alt=\"Sample 3\" />\n");
      out.write("                    <h4 class=\"product__title\">Battery</h4>\n");
      out.write("                    <p class=\"product__price\">$99</p>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("        </section>\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "components/footer.jsp", out, false);
      out.write("\n");
      out.write("\n");
      out.write("        <script>\n");
      out.write("            function showSuggestions(query) {\n");
      out.write("              const suggestions = document.getElementById(\"suggestions\");\n");
      out.write("              \n");
      out.write("              if (query.length === 0) {\n");
      out.write("                suggestions.style.display = \"none\";\n");
      out.write("                return;\n");
      out.write("              }\n");
      out.write("              // IoTBay Products\n");
      out.write("              const productList = [\"Sensor\", \"Cables\", \"Battery\", \"Drone\"];\n");
      out.write("              const filteredProducts = productList.filter(product => product.toLowerCase().includes(query.toLowerCase()));\n");
      out.write("              \n");
      out.write("              suggestions.innerHTML = \"\";\n");
      out.write("              \n");
      out.write("              if (filteredProducts.length > 0) {\n");
      out.write("                filteredProducts.forEach(product => {\n");
      out.write("                  const div = document.createElement(\"div\");\n");
      out.write("                  div.textContent = product;\n");
      out.write("                  div.style.padding = \"10px\";\n");
      out.write("                  div.style.cursor = \"pointer\";\n");
      out.write("                  div.onclick = function() {\n");
      out.write("                    document.getElementById(\"searchInput\").value = product;\n");
      out.write("                    suggestions.style.display = \"none\";\n");
      out.write("                  };\n");
      out.write("                  suggestions.appendChild(div);\n");
      out.write("                });\n");
      out.write("                suggestions.style.display = \"block\";\n");
      out.write("              } else {\n");
      out.write("                suggestions.style.display = \"none\";\n");
      out.write("              }\n");
      out.write("            }\n");
      out.write("        </script>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
